{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","_seasonConfig$season","react_default","a","createElement","className","concat","Spinner","class","message","defaultProps","App","state","errorMessage","_this2","this","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","src_SeasonDisplay_0","src_Spinner","renderContent","React","Component","ReactDOM","render","src_App","document","querySelector"],"mappings":"4LAGMA,SAAe,CACnBC,OAAQ,CACNC,KAAM,aACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,oBACNC,SAAU,eAyBCE,EAbO,SAAAC,GACpB,IATiBC,EAAKC,EAShBC,GATWF,EASQD,EAAMC,KATTC,GASc,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIDK,EAEFZ,EAAaS,GAAhCP,EAFqBU,EAErBV,KAAMC,EAFeS,EAEfT,SAEd,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBAAAC,OAAoBR,IAChCI,EAAAC,EAAAC,cAAA,KAAGC,UAAS,qBAAAC,OAAuBd,EAAvB,WACZU,EAAAC,EAAAC,cAAA,UAAKb,GACLW,EAAAC,EAAAC,cAAA,KAAGC,UAAS,sBAAAC,OAAwBd,EAAxB,aC5BZe,EAAU,SAAAZ,GACd,OACEO,EAAAC,EAAAC,cAAA,OAAKI,MAAM,oBACTN,EAAAC,EAAAC,cAAA,OAAKI,MAAM,0BAA0Bb,EAAMc,WAMjDF,EAAQG,aAAe,CACrBD,QAAS,cAGIF,QCVTI,6MACJC,MAAQ,CAAEhB,IAAK,KAAMiB,aAAc,uFAIf,IAAAC,EAAAC,KAClBC,OAAOC,UAAUC,YAAYC,mBAC3B,SAAAC,GAAQ,OAAIN,EAAKO,SAAS,CAAEzB,IAAKwB,EAASE,OAAOC,YACjD,SAAAC,GAAG,OAAIV,EAAKO,SAAS,CAAER,aAAcW,EAAIf,oDAQ3C,OAAIM,KAAKH,MAAMC,eAAiBE,KAAKH,MAAMhB,IAClCM,EAAAC,EAAAC,cAAA,qBAAaW,KAAKH,MAAMC,eAG5BE,KAAKH,MAAMC,cAAgBE,KAAKH,MAAMhB,IAClCM,EAAAC,EAAAC,cAACqB,EAAD,CAAe7B,IAAKmB,KAAKH,MAAMhB,MAMjCM,EAAAC,EAAAC,cAACsB,EAAD,CAASjB,QAAQ,6EAIxB,OAAOP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOU,KAAKY,wBA/BpBC,IAAMC,WAmCxBC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,cAAc","file":"static/js/main.4d562195.chunk.js","sourcesContent":["import \"./SeasonDisplay.css\";\nimport React from \"react\";\n\nconst seasonConfig = {\n  summer: {\n    text: \"Surf's up!\",\n    iconName: \"sun\"\n  },\n  winter: {\n    text: \"It's too cold bro\",\n    iconName: \"snowflake\"\n  }\n};\n\nconst getSeason = (lat, month) => {\n  if (month > 2 && month < 9) {\n    return lat > 0 ? \"summer\" : \"winter\";\n  } else {\n    return lat > 0 ? \"winter\" : \"summer\";\n  }\n};\n\nconst SeasonDisplay = props => {\n  const season = getSeason(props.lat, new Date().getMonth());\n  const { text, iconName } = seasonConfig[season];\n\n  return (\n    <div className={`season-display ${season}`}>\n      <i className={`icon-left massive ${iconName} icon`} />\n      <h1>{text}</h1>\n      <i className={`icon-right massive ${iconName} icon`} />\n    </div>\n  );\n};\n\nexport default SeasonDisplay;\n","import React from \"react\";\n\nconst Spinner = props => {\n  return (\n    <div class=\"ui active dimmer\">\n      <div class=\"ui massive text loader\">{props.message}</div>\n    </div>\n  );\n};\n\n// create a fallback loading message for the spinner component\nSpinner.defaultProps = {\n  message: \"loading...\"\n};\n\nexport default Spinner;\n\n// this is a reusable loading spinner component\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SeasonDisplay from \"./SeasonDisplay\";\nimport Spinner from \"./Spinner\";\n\nclass App extends React.Component {\n  state = { lat: null, errorMessage: \"\" };\n\n  // to update our state object, we call setState\n  // never make direct assignment to the state object\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(\n      position => this.setState({ lat: position.coords.latitude }),\n      err => this.setState({ errorMessage: err.message })\n    );\n  }\n\n  renderContent() {\n    // React requires that a dev define render\n    // for a better user experience, conditional statements will be used\n    // to return different content, depending on the senario\n    if (this.state.errorMessage && !this.state.lat) {\n      return <div>Error: {this.state.errorMessage}</div>;\n    }\n    // if no latitude and there is an error message = show error\n    if (!this.state.errorMessage && this.state.lat) {\n      return <SeasonDisplay lat={this.state.lat} />;\n    }\n    // *if no latitude and no error message = show \"loading!\"\n    // *instead of building if/else conditional statements, conditional rendering\n    //  is utilized.\n    // *returning different JSX depending upon the state or the props of component\n    return <Spinner message=\"I'm trying to get your location info...\" />;\n  }\n\n  render() {\n    return <div className=\"red\">{this.renderContent()}</div>;\n  }\n}\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n\n// Some things to remember about State\n\n// *'State' is a JS object that contains data relevant to a component\n// *Updating 'state' on a component causes the component to (almost)\n// instantly rerender\n// *State must be initialized when a component is created\n// *state can only be updated using the function 'setState'\n"],"sourceRoot":""}